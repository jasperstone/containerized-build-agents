{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.13.1.58284",
      "templateHash": "14519251374240561346"
    }
  },
  "parameters": {
    "aksClusterName": {
      "type": "string",
      "defaultValue": "[format('aks-buildagents-{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the AKS cluster"
      }
    },
    "containerRegistryName": {
      "type": "string",
      "defaultValue": "[format('cr{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Specifies the name of the container app environment."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Specifies the location for all resources."
      }
    },
    "azpPool": {
      "type": "string",
      "metadata": {
        "description": "The EXISTING Azure DevOps agent pool name"
      }
    },
    "azpUrl": {
      "type": "string",
      "metadata": {
        "description": "Azure DevOps ORG URI: https://dev.azure.com/{YourOrg}"
      }
    },
    "azpToken": {
      "type": "secureString",
      "metadata": {
        "description": "The personal access token with Agent Pools (read, manage) scope"
      }
    }
  },
  "variables": {
    "deploymentYamlUrl": "https://raw.githubusercontent.com/jasperstone/containerized-build-agents/main/templates/deployments/dockeragent.yaml"
  },
  "resources": [
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceGroup().id, parameters('aksClusterName'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d'))]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
        "principalId": "[reference(resourceId('Microsoft.Resources/deployments', parameters('aksClusterName')), '2020-10-01').outputs.kubeletIdentityPrincipalId.value]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', parameters('aksClusterName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "acr",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('containerRegistryName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "adminUserEnabled": {
            "value": true
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "13165983190383749949"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure Container Registry."
              },
              "maxLength": 50,
              "minLength": 5
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for all resources."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags for all resource(s)."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Basic",
              "allowedValues": [
                "Basic",
                "Standard",
                "Premium"
              ],
              "metadata": {
                "description": "The SKU of the Azure Container Registry."
              }
            },
            "adminUserEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Toggle the Azure Container Registry admin user."
              }
            },
            "publicNetworkAccessEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Toggle public network access to Azure Container Registry."
              }
            },
            "publicAzureAccessEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "When public network access is disabled, toggle this to allow Azure services to bypass the public network access rule."
              }
            },
            "networkAllowedIpRanges": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "A list of IP or IP ranges in CIDR format, that should be allowed access to Azure Container Registry."
              }
            },
            "networkDefaultAction": {
              "type": "string",
              "defaultValue": "Deny",
              "allowedValues": [
                "Allow",
                "Deny"
              ],
              "metadata": {
                "description": "The default action to take when no network rule match is found for accessing Azure Container Registry."
              }
            },
            "roleAssignments": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
              }
            },
            "lock": {
              "type": "string",
              "defaultValue": "NotSpecified",
              "metadata": {
                "description": "Specify the type of lock."
              },
              "allowedValues": [
                "CanNotDelete",
                "NotSpecified",
                "ReadOnly"
              ]
            },
            "privateEndpoints": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Define Private Endpoints that should be created for Azure Container Registry."
              }
            },
            "privateEndpointsApprovalEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Toggle if Private Endpoints manual approval for Azure Container Registry should be enabled."
              }
            },
            "zoneRedundancyEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Toggle if Zone Redundancy should be enabled on Azure Container Registry."
              }
            },
            "replicationLocations": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Array of Azure Location configurations that this Azure Container Registry should replicate too."
              }
            },
            "dataEndpointEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Toggle if a single data endpoint per region for serving data from Azure Container Registry should be enabled."
              }
            },
            "encryptionEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Toggle if encryption should be enabled on Azure Container Registry."
              }
            },
            "exportPolicyEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Toggle if export policy should be enabled on Azure Container Registry."
              }
            },
            "quarantinePolicyEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Toggle if quarantine policy should be enabled on Azure Container Registry."
              }
            },
            "retentionPolicyEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Toggle if retention policy should be enabled on Azure Container Registry."
              }
            },
            "retentionPolicyInDays": {
              "type": "int",
              "defaultValue": 10,
              "metadata": {
                "description": "Configure the retention policy in days for Azure Container Registry. Only effective is 'retentionPolicyEnabled' is 'true'."
              }
            },
            "trustPolicyEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Toggle if trust policy should be enabled on Azure Container Registry."
              }
            },
            "encryptionKeyVaultIdentity": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The client ID of the identity which will be used to access Key Vault."
              }
            },
            "encryptionKeyVaultKeyIdentifier": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The Key Vault URI to access the encryption key."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 365,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Resource ID of the diagnostic storage account."
              }
            },
            "diagnosticWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Resource ID of the diagnostic log analytics workspace."
              }
            },
            "diagnosticEventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "diagnosticEventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": [
                "ContainerRegistryRepositoryEvents",
                "ContainerRegistryLoginEvents"
              ],
              "allowedValues": [
                "ContainerRegistryRepositoryEvents",
                "ContainerRegistryLoginEvents"
              ],
              "metadata": {
                "description": "The name of logs that will be streamed."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "The name of metrics that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "varNetworkAllowedIpRanges",
                "count": "[length(parameters('networkAllowedIpRanges'))]",
                "input": {
                  "value": "[parameters('networkAllowedIpRanges')[copyIndex('varNetworkAllowedIpRanges')]]",
                  "action": "Allow"
                }
              },
              {
                "name": "varPrivateEndpoints",
                "count": "[length(parameters('privateEndpoints'))]",
                "input": {
                  "name": "[format('{0}-{1}', parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].name, parameters('name'))]",
                  "privateLinkServiceId": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]",
                  "groupIds": [
                    "registry"
                  ],
                  "subnetId": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].subnetId]",
                  "privateDnsZones": "[if(contains(parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')], 'privateDnsZoneId'), createArray(createObject('name', 'default', 'zoneId', parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].privateDnsZoneId)), createArray())]"
                }
              },
              {
                "name": "varReplicationLocations",
                "count": "[length(parameters('replicationLocations'))]",
                "input": {
                  "location": "[parameters('replicationLocations')[copyIndex('varReplicationLocations')].location]",
                  "regionEndpointEnabled": "[if(contains(parameters('replicationLocations')[copyIndex('varReplicationLocations')], 'regionEndpointEnabled'), parameters('replicationLocations')[copyIndex('varReplicationLocations')].regionEndpointEnabled, false())]",
                  "zoneRedundancy": "[if(contains(parameters('replicationLocations')[copyIndex('varReplicationLocations')], 'zoneRedundancy'), parameters('replicationLocations')[copyIndex('varReplicationLocations')].zoneRedundancy, false())]"
                }
              }
            ],
            "IS_PREMIUM_SKU": "[equals(parameters('skuName'), 'Premium')]"
          },
          "resources": [
            {
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2021-09-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "properties": {
                "adminUserEnabled": "[parameters('adminUserEnabled')]",
                "publicNetworkAccess": "[if(variables('IS_PREMIUM_SKU'), if(parameters('publicNetworkAccessEnabled'), 'Enabled', 'Disabled'), null())]",
                "networkRuleBypassOptions": "[if(variables('IS_PREMIUM_SKU'), if(parameters('publicAzureAccessEnabled'), 'AzureServices', 'None'), null())]",
                "networkRuleSet": "[if(variables('IS_PREMIUM_SKU'), createObject('defaultAction', parameters('networkDefaultAction'), 'ipRules', variables('varNetworkAllowedIpRanges')), null())]",
                "dataEndpointEnabled": "[parameters('dataEndpointEnabled')]",
                "encryption": "[if(variables('IS_PREMIUM_SKU'), if(parameters('encryptionEnabled'), createObject('keyVaultProperties', createObject('identity', parameters('encryptionKeyVaultIdentity'), 'keyIdentifier', parameters('encryptionKeyVaultKeyIdentifier')), 'status', 'enabled'), null()), null())]",
                "zoneRedundancy": "[if(variables('IS_PREMIUM_SKU'), if(parameters('zoneRedundancyEnabled'), 'Enabled', 'Disabled'), null())]",
                "policies": {
                  "exportPolicy": "[if(equals(parameters('publicAzureAccessEnabled'), 'false'), createObject('status', if(parameters('exportPolicyEnabled'), 'enabled', 'disabled')), null())]",
                  "quarantinePolicy": {
                    "status": "[if(parameters('quarantinePolicyEnabled'), 'enabled', 'disabled')]"
                  },
                  "retentionPolicy": "[if(variables('IS_PREMIUM_SKU'), if(parameters('retentionPolicyEnabled'), createObject('days', parameters('retentionPolicyInDays'), 'status', 'enabled'), null()), null())]",
                  "trustPolicy": "[if(variables('IS_PREMIUM_SKU'), if(parameters('trustPolicyEnabled'), createObject('status', 'enabled', 'type', 'Notary'), null()), null())]"
                }
              }
            },
            {
              "condition": "[variables('IS_PREMIUM_SKU')]",
              "copy": {
                "name": "replications",
                "count": "[length(variables('varReplicationLocations'))]"
              },
              "type": "Microsoft.ContainerRegistry/registries/replications",
              "apiVersion": "2021-09-01",
              "name": "[format('{0}/{1}', parameters('name'), variables('varReplicationLocations')[copyIndex()].location)]",
              "location": "[variables('varReplicationLocations')[copyIndex()].location]",
              "tags": "[parameters('tags')]",
              "properties": {
                "regionEndpointEnabled": "[variables('varReplicationLocations')[copyIndex()].regionEndpointEnabled]",
                "zoneRedundancy": "[if(variables('varReplicationLocations')[copyIndex()].zoneRedundancy, 'Enabled', 'Disabled')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
              "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
              "properties": {
                "level": "[parameters('lock')]",
                "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
              ]
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "containerRegistry_rbac",
                "count": "[length(parameters('roleAssignments'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-acr-rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "description": {
                    "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), parameters('roleAssignments')[copyIndex()].description, '')]"
                  },
                  "principalIds": {
                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                  },
                  "roleDefinitionIdOrName": {
                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                  },
                  "principalType": {
                    "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), parameters('roleAssignments')[copyIndex()].principalType, '')]"
                  },
                  "resourceId": {
                    "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.11.1.770",
                      "templateHash": "17936491673323073022"
                    }
                  },
                  "parameters": {
                    "description": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "principalIds": {
                      "type": "array"
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "roleDefinitionIdOrName": {
                      "type": "string"
                    },
                    "resourceId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                      "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                      "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                      "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                      "Cosmos DB Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '230815da-be43-4aae-9cb4-875f7bd000aa')]",
                      "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                      "DocumentDB Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5bd9cd88-fe45-4216-938b-f97437e15450')]",
                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                      "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                      "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                      "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                      "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                      "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                      "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                      "SQL Managed Instance Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4939a1f6-9ae0-4e48-a1e0-f2cbe897382d')]",
                      "SQL Security Manager": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '056cd41c-7e88-42e1-933e-88ba6a50c9c3')]",
                      "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                      "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                      "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                      "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]",
                      "AcrDelete": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c2f4ef07-c644-48eb-af81-4b1b4947fb11')]",
                      "AcrImageSigner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c2f4ef07-c644-48eb-af81-4b1b4947fb11')]",
                      "AcrPull": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                      "AcrPush": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8311e382-0749-4cb8-b61a-304f252e45ec')]",
                      "AcrQuarantineReader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cdda3590-29a3-44f6-95f2-9f980659eb04')]",
                      "AcrQuarantineWriter": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c8d4ff99-41c3-41a8-9f60-21dfdad59608')]"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(parameters('principalIds'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', last(split(parameters('resourceId'), '/')))]",
                      "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                      "properties": {
                        "description": "[parameters('description')]",
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                        "principalId": "[parameters('principalIds')[copyIndex()]]",
                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-acr-private-endpoints', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "privateEndpoints": {
                    "value": "[variables('varPrivateEndpoints')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "manualApprovalEnabled": {
                    "value": "[parameters('privateEndpointsApprovalEnabled')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.11.1.770",
                      "templateHash": "15991841577347853697"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "manualApprovalEnabled": {
                      "type": "bool"
                    },
                    "privateEndpoints": {
                      "type": "array"
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "varPrivateEndpoints",
                        "count": "[length(parameters('privateEndpoints'))]",
                        "input": {
                          "name": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].name]",
                          "privateLinkServiceId": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].privateLinkServiceId]",
                          "groupIds": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].groupIds]",
                          "subnetId": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].subnetId]",
                          "privateDnsZones": "[if(contains(parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')], 'privateDnsZones'), parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].privateDnsZones, createArray())]",
                          "customNetworkInterfaceName": "[if(contains(parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')], 'customNetworkInterfaceName'), parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].customNetworkInterfaceName, null())]"
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "privateEndpoint",
                        "count": "[length(variables('varPrivateEndpoints'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2022-05-01",
                      "name": "[format('{0}-{1}', variables('varPrivateEndpoints')[copyIndex()].name, uniqueString(variables('varPrivateEndpoints')[copyIndex()].name, variables('varPrivateEndpoints')[copyIndex()].subnetId, variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "privateLinkServiceConnections": "[if(parameters('manualApprovalEnabled'), null(), createArray(createObject('name', variables('varPrivateEndpoints')[copyIndex()].name, 'properties', createObject('privateLinkServiceId', variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId, 'groupIds', if(not(empty(variables('varPrivateEndpoints')[copyIndex()].groupIds)), variables('varPrivateEndpoints')[copyIndex()].groupIds, null())))))]",
                        "manualPrivateLinkServiceConnections": "[if(parameters('manualApprovalEnabled'), createArray(createObject('name', variables('varPrivateEndpoints')[copyIndex()].name, 'properties', createObject('privateLinkServiceId', variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId, 'groupIds', if(not(empty(variables('varPrivateEndpoints')[copyIndex()].groupIds)), variables('varPrivateEndpoints')[copyIndex()].groupIds, null())))), null())]",
                        "subnet": {
                          "id": "[variables('varPrivateEndpoints')[copyIndex()].subnetId]"
                        },
                        "customNetworkInterfaceName": "[variables('varPrivateEndpoints')[copyIndex()].customNetworkInterfaceName]"
                      }
                    },
                    {
                      "copy": {
                        "name": "privateDnsZoneGroup",
                        "count": "[length(variables('varPrivateEndpoints'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2022-05-01",
                      "name": "[format('{0}/{1}', format('{0}-{1}', variables('varPrivateEndpoints')[copyIndex()].name, uniqueString(variables('varPrivateEndpoints')[copyIndex()].name, variables('varPrivateEndpoints')[copyIndex()].subnetId, variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId)), 'default')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "privateDnsZoneConfigs",
                            "count": "[length(variables('varPrivateEndpoints')[copyIndex()].privateDnsZones)]",
                            "input": {
                              "name": "[if(contains(variables('varPrivateEndpoints')[copyIndex()].privateDnsZones[copyIndex('privateDnsZoneConfigs')], 'name'), variables('varPrivateEndpoints')[copyIndex()].privateDnsZones[copyIndex('privateDnsZoneConfigs')].name, 'default')]",
                              "properties": {
                                "privateDnsZoneId": "[variables('varPrivateEndpoints')[copyIndex()].privateDnsZones[copyIndex('privateDnsZoneConfigs')].zoneId]"
                              }
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-{1}', variables('varPrivateEndpoints')[copyIndex()].name, uniqueString(variables('varPrivateEndpoints')[copyIndex()].name, variables('varPrivateEndpoints')[copyIndex()].subnetId, variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId)))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the Azure Container Registry was deployed into."
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the Azure Container Registry."
              }
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the Azure Container Registry."
              }
            },
            "loginServer": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))).loginServer]",
              "metadata": {
                "description": "The login server URL of the Azure Container Registry."
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "buildAcrImage-linux-docker-agent",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "initialScriptDelay": {
            "value": "0"
          },
          "AcrName": {
            "value": "[parameters('containerRegistryName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "gitRepositoryUrl": {
            "value": "https://github.com/jasperstone/containerized-build-agents.git"
          },
          "gitRepoDirectory": {
            "value": "docker"
          },
          "imageName": {
            "value": "dockeragent"
          },
          "imageTag": {
            "value": "latest"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "13642411578150246430"
            }
          },
          "parameters": {
            "AcrName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure Container Registry"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location of the ACR and where to deploy the module resources to"
              }
            },
            "forceUpdateTag": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "How the deployment script should be forced to execute"
              }
            },
            "rbacRoleNeeded": {
              "type": "string",
              "defaultValue": "b24988ac-6180-42a0-ab88-20f7382dd24c",
              "metadata": {
                "description": "Azure RoleId that are required for the DeploymentScript resource to import images"
              }
            },
            "useExistingManagedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Does the Managed Identity already exists, or should be created"
              }
            },
            "managedIdentityName": {
              "type": "string",
              "defaultValue": "id-ContainerRegistryBuild",
              "metadata": {
                "description": "Name of the Managed Identity resource"
              }
            },
            "existingManagedIdentitySubId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "For an existing Managed Identity, the Subscription Id it is located in"
              }
            },
            "existingManagedIdentityResourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "For an existing Managed Identity, the Resource Group it is located in"
              }
            },
            "initialScriptDelay": {
              "type": "string",
              "defaultValue": "30s",
              "metadata": {
                "description": "A delay before the script import operation starts. Primarily to allow Azure AAD Role Assignments to propagate"
              }
            },
            "cleanupPreference": {
              "type": "string",
              "defaultValue": "OnSuccess",
              "metadata": {
                "description": "When the script resource is cleaned up"
              },
              "allowedValues": [
                "OnSuccess",
                "OnExpiration",
                "Always"
              ]
            },
            "gitRepositoryUrl": {
              "type": "string",
              "metadata": {
                "description": "The Git Repository URL, eg. https://github.com/YOURORG/YOURREPO.git"
              }
            },
            "gitBranch": {
              "type": "string",
              "defaultValue": "main",
              "metadata": {
                "description": "The name of the repository branch to use"
              }
            },
            "gitRepoDirectory": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The directory in the repo that contains the dockerfile"
              }
            },
            "imageName": {
              "type": "string",
              "metadata": {
                "description": "The image name/path you want to create in ACR"
              }
            },
            "imageTag": {
              "type": "string",
              "defaultValue": "[string(dateTimeToEpoch(utcNow()))]",
              "metadata": {
                "description": "The image tag you want to create"
              }
            },
            "acrBuildPlatform": {
              "type": "string",
              "defaultValue": "linux",
              "metadata": {
                "description": "The ACR compute platform needed to build the image"
              }
            }
          },
          "variables": {
            "$fxv#0": "#!/bin/bash\nset -e\n\necho \"Waiting on RBAC replication ($initialDelay)\"\nsleep $initialDelay\n\naz acr build --resource-group $acrResourceGroup \\\n  --registry $acrName \\\n  --image $taggedImageName $repo \\\n  --platform $platform",
            "repo": "[format('{0}#{1}:{2}', parameters('gitRepositoryUrl'), parameters('gitBranch'), parameters('gitRepoDirectory'))]",
            "cleanRepoName": "[last(split(parameters('gitRepositoryUrl'), '/'))]",
            "taggedImageName": "[format('{0}:{1}', parameters('imageName'), parameters('imageTag'))]"
          },
          "resources": [
            {
              "condition": "[not(parameters('useExistingManagedIdentity'))]",
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[parameters('managedIdentityName')]",
              "location": "[parameters('location')]"
            },
            {
              "condition": "[not(empty(parameters('rbacRoleNeeded')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('AcrName'))]",
              "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('AcrName')), parameters('rbacRoleNeeded'), if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('rbacRoleNeeded'))]",
                "principalId": "[if(parameters('useExistingManagedIdentity'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId)]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "[format('ACR-Build-{0}', variables('cleanRepoName'))]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]": {}
                }
              },
              "kind": "AzureCLI",
              "properties": {
                "forceUpdateTag": "[parameters('forceUpdateTag')]",
                "azCliVersion": "2.30.0",
                "timeout": "PT45M",
                "retentionInterval": "P1D",
                "environmentVariables": [
                  {
                    "name": "acrName",
                    "value": "[parameters('AcrName')]"
                  },
                  {
                    "name": "acrResourceGroup",
                    "value": "[resourceGroup().name]"
                  },
                  {
                    "name": "taggedImageName",
                    "value": "[variables('taggedImageName')]"
                  },
                  {
                    "name": "repo",
                    "value": "[variables('repo')]"
                  },
                  {
                    "name": "platform",
                    "value": "[parameters('acrBuildPlatform')]"
                  },
                  {
                    "name": "initialDelay",
                    "value": "[parameters('initialScriptDelay')]"
                  }
                ],
                "scriptContent": "[variables('$fxv#0')]",
                "cleanupPreference": "[parameters('cleanupPreference')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]",
                "[extensionResourceId(resourceId('Microsoft.ContainerRegistry/registries', parameters('AcrName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('AcrName')), parameters('rbacRoleNeeded'), if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')))))]"
              ]
            }
          ],
          "outputs": {
            "acrImage": {
              "type": "string",
              "value": "[format('{0}/{1}', reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('AcrName')), '2021-12-01-preview').loginServer, variables('taggedImageName'))]",
              "metadata": {
                "description": "The ACR uri the image can be accessed on if building was successful"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'acr')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[parameters('aksClusterName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "aksClusterName": {
            "value": "[parameters('aksClusterName')]"
          },
          "osType": {
            "value": "Linux"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.13.1.58284",
              "templateHash": "4399766712221311698"
            }
          },
          "parameters": {
            "aksClusterName": {
              "type": "string",
              "defaultValue": "aks-buildagents",
              "metadata": {
                "description": "The name of the Managed Cluster resource."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location of AKS resource."
              }
            },
            "dnsPrefix": {
              "type": "string",
              "defaultValue": "[parameters('aksClusterName')]",
              "metadata": {
                "description": "Optional DNS prefix to use with hosted Kubernetes API server FQDN."
              }
            },
            "osDiskSizeGB": {
              "type": "int",
              "defaultValue": 0,
              "maxValue": 1023,
              "minValue": 0,
              "metadata": {
                "description": "Disk size (in GiB) to provision for each of the agent pool nodes. This value ranges from 0 to 1023. Specifying 0 will apply the default disk size for that agentVMSize."
              }
            },
            "agentCount": {
              "type": "int",
              "defaultValue": 3,
              "maxValue": 100,
              "minValue": 1,
              "metadata": {
                "description": "The number of nodes for the cluster. 1 Node is enough for Dev/Test and minimum 3 nodes, is recommended for Production"
              }
            },
            "agentVMSize": {
              "type": "string",
              "defaultValue": "Standard_D2s_v3",
              "metadata": {
                "description": "The size of the Virtual Machine."
              }
            },
            "osType": {
              "type": "string",
              "defaultValue": "Linux",
              "allowedValues": [
                "Linux",
                "Windows"
              ],
              "metadata": {
                "description": "The type of operating system."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2022-10-01",
              "name": "[parameters('aksClusterName')]",
              "location": "[parameters('location')]",
              "properties": {
                "sku": {
                  "name": "PerGB2018"
                }
              }
            },
            {
              "type": "Microsoft.ContainerService/managedClusters",
              "apiVersion": "2022-01-02-preview",
              "name": "[parameters('aksClusterName')]",
              "location": "[parameters('location')]",
              "tags": {
                "displayname": "AKS Cluster"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "enableRBAC": true,
                "dnsPrefix": "[parameters('dnsPrefix')]",
                "addonProfiles": {
                  "omsagent": {
                    "enabled": true,
                    "config": {
                      "logAnalyticsWorkspaceResourceID": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('aksClusterName'))]"
                    }
                  }
                },
                "agentPoolProfiles": [
                  {
                    "name": "agentpool",
                    "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
                    "count": "[parameters('agentCount')]",
                    "vmSize": "[parameters('agentVMSize')]",
                    "osType": "[parameters('osType')]",
                    "type": "VirtualMachineScaleSets",
                    "mode": "System"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('aksClusterName'))]"
              ]
            }
          ],
          "outputs": {
            "controlPlaneFQDN": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('aksClusterName')), '2022-01-02-preview').fqdn]"
            },
            "kubeletIdentityPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('aksClusterName')), '2022-01-02-preview').identityProfile.kubeletidentity.objectId]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "kubectlSecretAndDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "initialScriptDelay": {
            "value": "0"
          },
          "aksName": {
            "value": "[parameters('aksClusterName')]"
          },
          "commands": {
            "value": [
              "[format('kubectl create secret generic azdevops --from-literal=AZP_URL={0} --from-literal=AZP_TOKEN={1} --from-literal=AZP_POOL={2}', parameters('azpUrl'), parameters('azpToken'), parameters('azpPool'))]",
              "[format('kubectl apply -f {0} && kubectl set image deployment/azdevops-deployment kubepodcreation={1}', variables('deploymentYamlUrl'), reference(resourceId('Microsoft.Resources/deployments', 'buildAcrImage-linux-docker-agent'), '2020-10-01').outputs.acrImage.value)]"
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.5.6.12127",
              "templateHash": "25989803949072927"
            }
          },
          "parameters": {
            "aksName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure Kubernetes Service"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location to deploy the resources to"
              }
            },
            "forceUpdateTag": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "How the deployment script should be forced to execute"
              }
            },
            "rbacRolesNeeded": {
              "type": "array",
              "defaultValue": [
                "b24988ac-6180-42a0-ab88-20f7382dd24c",
                "7f6c6a51-bcf8-42ba-9220-52d62157d7db"
              ],
              "metadata": {
                "description": "An array of Azure RoleIds that are required for the DeploymentScript resource"
              }
            },
            "useExistingManagedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Does the Managed Identity already exists, or should be created"
              }
            },
            "managedIdentityName": {
              "type": "string",
              "defaultValue": "id-AksRunCommandProxy",
              "metadata": {
                "description": "Name of the Managed Identity resource"
              }
            },
            "existingManagedIdentitySubId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "For an existing Managed Identity, the Subscription Id it is located in"
              }
            },
            "existingManagedIdentityResourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "For an existing Managed Identity, the Resource Group it is located in"
              }
            },
            "commands": {
              "type": "array",
              "metadata": {
                "description": "An array of commands to run"
              }
            },
            "initialScriptDelay": {
              "type": "string",
              "defaultValue": "120s",
              "metadata": {
                "description": "A delay before the script import operation starts. Primarily to allow Azure AAD Role Assignments to propagate"
              }
            },
            "cleanupPreference": {
              "type": "string",
              "defaultValue": "OnSuccess",
              "metadata": {
                "description": "When the script resource is cleaned up"
              },
              "allowedValues": [
                "OnSuccess",
                "OnExpiration",
                "Always"
              ]
            }
          },
          "resources": [
            {
              "condition": "[not(parameters('useExistingManagedIdentity'))]",
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[parameters('managedIdentityName')]",
              "location": "[parameters('location')]"
            },
            {
              "copy": {
                "name": "rbac",
                "count": "[length(parameters('rbacRolesNeeded'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-08-01-preview",
              "scope": "[format('Microsoft.ContainerService/managedClusters/{0}', parameters('aksName'))]",
              "name": "[guid(resourceId('Microsoft.ContainerService/managedClusters', parameters('aksName')), parameters('rbacRolesNeeded')[copyIndex()], if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('rbacRolesNeeded')[copyIndex()])]",
                "principalId": "[if(parameters('useExistingManagedIdentity'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId)]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
              ]
            },
            {
              "copy": {
                "name": "runAksCommand",
                "count": "[length(parameters('commands'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "[format('AKS-Run-{0}-{1}-{2}', parameters('aksName'), deployment().name, copyIndex())]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]": {}
                }
              },
              "kind": "AzureCLI",
              "properties": {
                "forceUpdateTag": "[parameters('forceUpdateTag')]",
                "azCliVersion": "2.35.0",
                "timeout": "PT10M",
                "retentionInterval": "P1D",
                "environmentVariables": [
                  {
                    "name": "RG",
                    "value": "[resourceGroup().name]"
                  },
                  {
                    "name": "aksName",
                    "value": "[parameters('aksName')]"
                  },
                  {
                    "name": "command",
                    "value": "[parameters('commands')[copyIndex()]]"
                  },
                  {
                    "name": "initialDelay",
                    "value": "[parameters('initialScriptDelay')]"
                  },
                  {
                    "name": "loopIndex",
                    "value": "[string(copyIndex())]"
                  }
                ],
                "scriptContent": "      #!/bin/bash\n      set -e\n\n      if [ \"$loopIndex\" == \"0\" ] && [ \"$initialDelay\" != \"0\" ]\n      then\n        echo \"Waiting on RBAC replication ($initialDelay)\"\n        sleep $initialDelay\n\n        #Force RBAC refresh\n        az logout\n        az login --identity\n      fi\n\n      echo \"Sending command $command to AKS Cluster $aksName in $RG\"\n      cmdOut=$(az aks command invoke -g $RG -n $aksName -o json --command \"${command}\")\n      echo $cmdOut\n\n      jsonOutputString=$cmdOut\n      echo $jsonOutputString > $AZ_SCRIPTS_OUTPUT_PATH\n    ",
                "cleanupPreference": "[parameters('cleanupPreference')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]",
                "rbac"
              ]
            }
          ],
          "outputs": {
            "commandOutput": {
              "type": "array",
              "copy": {
                "count": "[length(parameters('commands'))]",
                "input": {
                  "Index": "[copyIndex()]",
                  "Name": "[format('AKS-Run-{0}-{1}-{2}', parameters('aksName'), deployment().name, copyIndex())]",
                  "CommandOutput": "[reference(resourceId('Microsoft.Resources/deploymentScripts', format('AKS-Run-{0}-{1}-{2}', parameters('aksName'), deployment().name, copyIndex()))).outputs]"
                }
              },
              "metadata": {
                "description": "Array of command output from each Deployment Script AKS run command"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', parameters('aksClusterName'))]",
        "[resourceId('Microsoft.Resources/deployments', 'buildAcrImage-linux-docker-agent')]"
      ]
    }
  ]
}