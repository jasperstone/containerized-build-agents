{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.13.1.58284",
      "templateHash": "3439513061197620005"
    }
  },
  "parameters": {
    "containerRegistryName": {
      "type": "string",
      "defaultValue": "[format('cr{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Specifies the name of the container app environment."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Specifies the location for all resources."
      }
    },
    "instanceCount": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Number of conainer instances to create"
      }
    },
    "subnetResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Subnet resource group name"
      }
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Existing subnet name (VNet/Subnet)"
      }
    },
    "nameservers": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Comma separated list of DNS nameservers: [\"dns1\", \"dns2\"]"
      }
    },
    "rootCertUrl": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Url for PEM formatted x509 root cert bundle to import"
      }
    },
    "azpUrl": {
      "type": "string",
      "metadata": {
        "description": "Azure DevOps ORG URI: https://dev.azure.com/{YourOrg}"
      }
    },
    "azpPool": {
      "type": "string",
      "metadata": {
        "description": "The EXISTING Azure DevOps agent pool name"
      }
    },
    "azpToken": {
      "type": "secureString",
      "metadata": {
        "description": "The personal access token with Agent Pools (read, manage) scope"
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2021-09-01",
      "name": "[parameters('containerRegistryName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Basic"
      },
      "properties": {
        "adminUserEnabled": true
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "buildLinuxImage",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "initialScriptDelay": {
            "value": "0"
          },
          "AcrName": {
            "value": "[parameters('containerRegistryName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "gitRepositoryUrl": {
            "value": "https://github.com/jasperstone/containerized-build-agents.git"
          },
          "buildWorkingDirectory": {
            "value": "docker/linuxagent"
          },
          "imageName": {
            "value": "linuxagent"
          },
          "imageTag": {
            "value": "latest"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.13.1.58284",
              "templateHash": "1371553491347240684"
            }
          },
          "parameters": {
            "AcrName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure Container Registry"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location of the ACR and where to deploy the module resources to"
              }
            },
            "forceUpdateTag": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "How the deployment script should be forced to execute"
              }
            },
            "rbacRoleNeeded": {
              "type": "string",
              "defaultValue": "b24988ac-6180-42a0-ab88-20f7382dd24c",
              "metadata": {
                "description": "Azure RoleId that are required for the DeploymentScript resource to import images"
              }
            },
            "useExistingManagedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Does the Managed Identity already exists, or should be created"
              }
            },
            "managedIdentityName": {
              "type": "string",
              "defaultValue": "id-ContainerRegistryBuild",
              "metadata": {
                "description": "Name of the Managed Identity resource"
              }
            },
            "existingManagedIdentitySubId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "For an existing Managed Identity, the Subscription Id it is located in"
              }
            },
            "existingManagedIdentityResourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "For an existing Managed Identity, the Resource Group it is located in"
              }
            },
            "initialScriptDelay": {
              "type": "string",
              "defaultValue": "30s",
              "metadata": {
                "description": "A delay before the script import operation starts. Primarily to allow Azure AAD Role Assignments to propagate"
              }
            },
            "cleanupPreference": {
              "type": "string",
              "defaultValue": "OnSuccess",
              "metadata": {
                "description": "When the script resource is cleaned up"
              },
              "allowedValues": [
                "OnSuccess",
                "OnExpiration",
                "Always"
              ]
            },
            "gitRepositoryUrl": {
              "type": "string",
              "metadata": {
                "description": "The Git Repository URL, eg. https://github.com/YOURORG/YOURREPO.git"
              }
            },
            "gitBranch": {
              "type": "string",
              "defaultValue": "main",
              "metadata": {
                "description": "The name of the repository branch to use"
              }
            },
            "buildWorkingDirectory": {
              "type": "string",
              "defaultValue": ".",
              "metadata": {
                "description": "The docker context working directory, change this when your Dockerfile and source files are ALL located in a repo subdirectory"
              }
            },
            "dockerfileDirectory": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The subdirectory relative to the working directory that contains the Dockerfile"
              }
            },
            "dockerfileName": {
              "type": "string",
              "defaultValue": "Dockerfile",
              "metadata": {
                "description": "The name of the dockerfile"
              }
            },
            "imageName": {
              "type": "string",
              "metadata": {
                "description": "The image name/path you want to create in ACR"
              }
            },
            "imageTag": {
              "type": "string",
              "defaultValue": "[string(dateTimeToEpoch(utcNow()))]",
              "metadata": {
                "description": "The image tag you want to create"
              }
            },
            "acrBuildPlatform": {
              "type": "string",
              "defaultValue": "linux",
              "metadata": {
                "description": "The ACR compute platform needed to build the image"
              }
            }
          },
          "variables": {
            "$fxv#0": "#!/bin/bash\nset -e\n\necho \"Waiting on RBAC replication ($initialDelay)\"\nsleep $initialDelay\n\naz acr build --resource-group $acrResourceGroup \\\n  --registry $acrName \\\n  --image $taggedImageName $repo \\\n  --file $dockerfilePath \\\n  --platform $platform",
            "repo": "[format('{0}#{1}:{2}', parameters('gitRepositoryUrl'), parameters('gitBranch'), parameters('buildWorkingDirectory'))]",
            "cleanRepoName": "[last(split(parameters('gitRepositoryUrl'), '/'))]",
            "cleanImageName": "[replace(parameters('imageName'), '/', '')]",
            "taggedImageName": "[format('{0}:{1}', parameters('imageName'), parameters('imageTag'))]",
            "dockerfilePath": "[if(not(empty(parameters('dockerfileDirectory'))), format('{0}/{1}', parameters('dockerfileDirectory'), parameters('dockerfileName')), parameters('dockerfileName'))]"
          },
          "resources": [
            {
              "condition": "[not(parameters('useExistingManagedIdentity'))]",
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[parameters('managedIdentityName')]",
              "location": "[parameters('location')]"
            },
            {
              "condition": "[not(empty(parameters('rbacRoleNeeded')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('AcrName'))]",
              "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('AcrName')), parameters('rbacRoleNeeded'), if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('rbacRoleNeeded'))]",
                "principalId": "[if(parameters('useExistingManagedIdentity'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId)]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "[format('ACR-Build-{0}-{1}', variables('cleanImageName'), variables('cleanRepoName'))]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]": {}
                }
              },
              "kind": "AzureCLI",
              "properties": {
                "forceUpdateTag": "[parameters('forceUpdateTag')]",
                "azCliVersion": "2.30.0",
                "timeout": "PT45M",
                "retentionInterval": "P1D",
                "environmentVariables": [
                  {
                    "name": "acrName",
                    "value": "[parameters('AcrName')]"
                  },
                  {
                    "name": "acrResourceGroup",
                    "value": "[resourceGroup().name]"
                  },
                  {
                    "name": "taggedImageName",
                    "value": "[variables('taggedImageName')]"
                  },
                  {
                    "name": "repo",
                    "value": "[variables('repo')]"
                  },
                  {
                    "name": "dockerfilePath",
                    "value": "[variables('dockerfilePath')]"
                  },
                  {
                    "name": "platform",
                    "value": "[parameters('acrBuildPlatform')]"
                  },
                  {
                    "name": "initialDelay",
                    "value": "[parameters('initialScriptDelay')]"
                  }
                ],
                "scriptContent": "[variables('$fxv#0')]",
                "cleanupPreference": "[parameters('cleanupPreference')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]",
                "[extensionResourceId(resourceId('Microsoft.ContainerRegistry/registries', parameters('AcrName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('AcrName')), parameters('rbacRoleNeeded'), if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')))))]"
              ]
            }
          ],
          "outputs": {
            "acrImage": {
              "type": "string",
              "value": "[format('{0}/{1}', reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('AcrName')), '2021-12-01-preview').loginServer, variables('taggedImageName'))]",
              "metadata": {
                "description": "The ACR uri the image can be accessed on if building was successful"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "buildLinuxAci",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "containerRegistryName": {
            "value": "[parameters('containerRegistryName')]"
          },
          "containerRegistryResourceGroup": {
            "value": "[resourceGroup().name]"
          },
          "subnetResourceGroup": {
            "value": "[parameters('subnetResourceGroup')]"
          },
          "subnetName": {
            "value": "[parameters('subnetName')]"
          },
          "nameservers": {
            "value": "[parameters('nameservers')]"
          },
          "rootCertUrl": {
            "value": "[parameters('rootCertUrl')]"
          },
          "osType": {
            "value": "Linux"
          },
          "imageName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'buildLinuxImage'), '2020-10-01').outputs.acrImage.value]"
          },
          "azpPool": {
            "value": "[parameters('azpPool')]"
          },
          "azpToken": {
            "value": "[parameters('azpToken')]"
          },
          "azpUrl": {
            "value": "[parameters('azpUrl')]"
          },
          "instanceCount": {
            "value": "[parameters('instanceCount')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.13.1.58284",
              "templateHash": "17787550936277319131"
            }
          },
          "parameters": {
            "containerRegistryResourceGroup": {
              "type": "string",
              "metadata": {
                "description": "Resource group for the Azure container registry"
              }
            },
            "containerRegistryName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the container app environment."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Specifies the location for all resources."
              }
            },
            "instanceCount": {
              "type": "int",
              "defaultValue": 3,
              "metadata": {
                "description": "Number of conainer instances to create"
              }
            },
            "subnetResourceGroup": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Subnet resource group name"
              }
            },
            "subnetName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Existing subnet name (VNet/Subnet)"
              }
            },
            "nameservers": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Comma separated list of DNS nameservers: [\"dns1\", \"dns2\"]"
              }
            },
            "imageName": {
              "type": "string",
              "metadata": {
                "description": "Image name"
              }
            },
            "osType": {
              "type": "string",
              "allowedValues": [
                "Linux",
                "Windows"
              ],
              "metadata": {
                "description": "OS type of the image"
              }
            },
            "rootCertUrl": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Url for PEM formatted x509 root cert bundle to import"
              }
            },
            "azpUrl": {
              "type": "string",
              "metadata": {
                "description": "Azure DevOps ORG URI: https://dev.azure.com/{YourOrg}"
              }
            },
            "azpPool": {
              "type": "string",
              "metadata": {
                "description": "The EXISTING Azure DevOps agent pool name"
              }
            },
            "azpToken": {
              "type": "secureString",
              "metadata": {
                "description": "The personal access token with Agent Pools (read, manage) scope"
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "aciNames",
                "count": "[length(range(0, parameters('instanceCount')))]",
                "input": "[toLower(format('aci-{0}agent-{1}', parameters('osType'), padLeft(range(0, parameters('instanceCount'))[copyIndex('aciNames')], 2, '0')))]"
              }
            ]
          },
          "resources": [
            {
              "copy": {
                "name": "containerGroup",
                "count": "[length(variables('aciNames'))]"
              },
              "type": "Microsoft.ContainerInstance/containerGroups",
              "apiVersion": "2021-09-01",
              "name": "[variables('aciNames')[copyIndex()]]",
              "location": "[parameters('location')]",
              "properties": {
                "osType": "[parameters('osType')]",
                "imageRegistryCredentials": [
                  {
                    "server": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('containerRegistryResourceGroup')), 'Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), '2021-09-01').loginServer]",
                    "username": "[listCredentials(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('containerRegistryResourceGroup')), 'Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), '2021-09-01').username]",
                    "password": "[listCredentials(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('containerRegistryResourceGroup')), 'Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), '2021-09-01').passwords[0].value]"
                  }
                ],
                "subnetIds": "[if(empty(parameters('subnetName')), null(), createArray(createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('subnetResourceGroup')), 'Microsoft.Network/virtualNetworks/subnets', split(parameters('subnetName'), '/')[0], split(parameters('subnetName'), '/')[1]))))]",
                "dnsConfig": "[if(and(equals(parameters('osType'), 'Linux'), empty(parameters('nameservers'))), null(), createObject('nameServers', parameters('nameservers')))]",
                "containers": [
                  {
                    "name": "[variables('aciNames')[copyIndex()]]",
                    "properties": {
                      "image": "[parameters('imageName')]",
                      "resources": {
                        "requests": {
                          "cpu": 2,
                          "memoryInGB": 4
                        }
                      },
                      "environmentVariables": [
                        {
                          "name": "AZP_AGENT_NAME",
                          "value": "[variables('aciNames')[copyIndex()]]"
                        },
                        {
                          "name": "AZP_POOL",
                          "value": "[parameters('azpPool')]"
                        },
                        {
                          "name": "AZP_URL",
                          "value": "[parameters('azpUrl')]"
                        },
                        {
                          "name": "ROOT_CERT_BUNDLE_URL",
                          "value": "[parameters('rootCertUrl')]"
                        },
                        {
                          "name": "AZP_TOKEN",
                          "secureValue": "[parameters('azpToken')]"
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'buildLinuxImage')]"
      ]
    }
  ]
}